openapi: 3.0.3
info:
  title: WASAPhoto
  description: |-
    Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! 
    Directly from your PC, you can upload your photos, and they will be visible to everyone who is following you.
  version: "1"
  contact:
    email: fede.1942562@studenti.uniroma1.it
tags:
  - name: users
    description: Information about users
  - name: relationships
    description: Relationships with other users
  - name: photos
    description: Information about photos
  - name: comments
    description: Manage comments
  - name: likes
    description: Manage likes
  - name: login
    description: The authentication process
 
 
paths:
  /session:
    post:
      tags: 
      - login
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        $ref: "#/components/requestBodies/Username"
      responses:
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: "abcdef012345"
  /photos:
    post:
      tags: 
      - photos
      summary: Uploads a new photo.
      description: |-
        Uploads a new photo on behalf of the authenticated user.
      operationId: uploadPhoto
      requestBody:
        required: true
        content:
          image/*:
            schema:
              type: string
              format: binary
      responses:
        "201":
          description: Photo uploaded successfully.
          content:
            application/json:
              schema:
                description: The ID of the photo resource.
                type: string
                example: "abc123"
        "400":  
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "413": # Request Entity Too Large
          description: The photo is too large in size.
        "500": 
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /photos/{photo-id}:
    parameters:
    - $ref: "#/components/parameters/PhotoId"
    get:
      tags:
      - photos
      summary: Get information about a photo resource.
      description: |
        Get information about a photo resource, specifically about the date and time of its creation, the owner of the photo and its collections of likes and comments.
      operationId: getPhoto
      responses:
        "200":
          description: Photo resource information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhotoDetails"
        "400":  
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Photo ID not found
        "500": 
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    delete:
      tags:
        - photos
      summary: Delete an uploaded photo on behalf of the authenticated user.
      description: |-
        Delets the uploaded photo with the specified photo-id, with the respective likes (if any) and comments (if any) on behalf of the authenticated user (if the user is the owner of the photo).
      operationId: deletePhoto
      responses:
        "204":
          description: Photo deleted successfully.
        "400":  
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: User can delete only his own photos
        "500": 
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /photos/{photo-id}/comments:
    parameters:
    - $ref: "#/components/parameters/PhotoId"
    post:
      tags:
      - comments
      summary: Create a comment on a photo resource.
      description: |-
        Create a comment on the photo resource with the specified photo-id on behalf of the authenticated user.
      operationId: commentPhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  description: Text of the comment
                  type: string
                  example: "Nice photo! :)"
                  minLength: 3
                  maxLength: 300
      responses:
        "201":
          description: Comment created successfully.
        "400":  
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Photo ID not found
        "500": 
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /photos/{photo-id}/comments/{comment-id}:
    parameters:
    - $ref: "#/components/parameters/PhotoId"
    - name: comment-id
      description: The ID of the comment entry.
      in: path
      required: true
      schema:
        type: string
        example: "bcd456"
    delete:
      tags:
      - comments
      summary: Remove a comment from a photo.
      description: |-
        Remove the comment with the specified comment-id on the photo resource with photo-id, if created by the authenticated user.
      operationId: uncommentPhoto
      responses:
        "204":
          description: Comment deleted successfully.
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: User can only delete his own comments
        "500": 
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /photos/{photo-id}/likes/{user-id}:
    parameters:
    - $ref: "#/components/parameters/PhotoId"
    - $ref: "#/components/parameters/UserId"
    put:
      tags:
      - likes
      summary: Set a like on a photo.
      description: |- 
        Set a like on the photo resource with the specified photo-id on behalf of the user with the specified user-id.
        The user-id in the path must match the user ID of the authenticated user.
      operationId: likePhoto
      responses:
        "201":
          description: Photo liked successfully.
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: Operation not allowed
        "404":
          description: Photo ID not found
        "500": 
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    delete:
      tags:
      - likes
      summary: Remove a like on a photo.
      description: |-
        Remove a like on the e with the specified photo-id on behalf of the user with the specified user-id (if the photo photo resourcwas previously liked by the user).
        The user-id in the path must match the user ID of the authenticated user.
      operationId: unlikePhoto
      responses:
        "204":
          description: Like removed successfully.
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: User can only remove his own likes.
        "500": 
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /users/search:
    get:
      tags:
      - users
      summary: Search for a user by username.
      description: |- 
        Search for a user by specifying their username.
        If no username is provided, then list all users.
      operationId: searchUser
      parameters:
      - name: username
        description: The username.
        in: query
        required: false
        schema:
          type: string
          example: Maria
          pattern: 'Ë†.*?$'
          minLength: 3
          maxLength: 16
      responses:
        "200":
          description: List of found users.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersInfoListResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Username not found
        "500": 
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /users/me/stream:
    get:
      tags:
      - users
      summary: Get the authenticated user's stream.
      description: |-
        The authenticated user will be presented with his stream of photos in reverse chronological order, with information about when it was uploaded (date and time) and how many likes and comments it has.
        The stream is composed by photos from other users that this user follows.
      operationId: getMyStream
      responses:
        "200":
          description: User's stream photos.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhotoListResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500": 
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /users/{user-id}:
    parameters:
    - $ref: "#/components/parameters/UserId"
    get:
      tags:
      - users
      summary: Get a user's profile.
      description: |-
        Get information about the specified user's profile, specifically about the user's photos (in reverse chronological order), their followers and following numbers, and how many photos have been uploaded. 
      operationId: getUserProfile
      responses:
        "200":
          description: User's profile.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: User ID not found
        "500": 
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    patch:
      tags:
      - users
      summary: Update the username
      description: |-
        Update the old username of the user resource with the specified user-id to the new username provided in the request body.
        The user-id in the path must match the user ID of the authenticated user.
      operationId: setMyUsername
      requestBody:
        $ref: "#/components/requestBodies/Username"
      responses:
        "204":
          description: Username updated successfully.
        "400":  
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: User can only update his own username
        "409": # Conflict
          description: Username already taken
        "500": 
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /users/{user-id}/following:
    parameters:
    - $ref: "#/components/parameters/UserId"
    get:
      tags:
      - relationships
      summary: Get the list of users this user follows.
      description: |-
        Get the list of users that the user with the specified user-id follows.
      operationId: getFollowing
      responses:
        "200":
          description: List of users this user follows.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersInfoListResponse"
        "400":  
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: User ID not found
        "500": 
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /users/{user-id}/following/{target-user-id}:
    parameters:
    - $ref: "#/components/parameters/UserId"
    - $ref: "#/components/parameters/TargetUserId"
    delete:
      tags:
      - relationships
      summary: Allow a user to unfollow another user.
      description: |-
        Allows the user with the specified user-id to unfollow the user with the specified target-user-id (if previously followed).
        The user-id in the path must match the user ID of the authenticated user.
      operationId: unfollowUser
      responses:
        "204":
          description: User unfollowed successfully.
        "400":  
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: Operation not allowed
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    put:
      tags:
      - relationships
      summary: Allow a user to follow another user.
      description: |-
        Allows the user with the specified user-id to follow the user with the specified target-user-id.
        The user-id in the path must match the user ID of the authenticated user.
      operationId: followUser
      responses:
        "204":
          description: User followed successfully.
        "400":  
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: Operation not allowed
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /users/{user-id}/banned:
    parameters:
    - $ref: "#/components/parameters/UserId"
    get:
      tags:
      - relationships
      summary: Get the list of users that a user banned.
      description: |-
        Get the list of users that the user with the specified user-id has banned.
      responses:
        "200":
          description: List of users this user has banned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersInfoListResponse"
        "400":  
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: User ID not found
        "500": 
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
  /users/{user-id}/banned/{target-user-id}:
    parameters:
    - $ref: "#/components/parameters/UserId"
    - $ref: "#/components/parameters/TargetUserId"
    delete:
      tags:
      - relationships
      summary: Allow a user to unban another user.
      description: |-
        Allows the user with the specified user-id to unban the user with the specified target-user-id (if previously banned).
        The user-id in the path must match the user ID of the authenticated user.
      operationId: unbanUser
      responses:
        "204":
          description: User unbanned successfully.
        "400":  
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: Operation not allowed
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
    put:
      tags:
      - relationships
      summary: Allow a user to ban another user.
      description: |-
        Allows the user with the specified user-id to ban the user with the specified target-user-id.
        The user-id in the path must match the user ID of the authenticated user.
      operationId: banUser
      responses:
        "204":
          description: User banned successfully.
        "400":  
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: Operation not allowed
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - bearerAuth: []
 
components:
  responses:
    BadRequest:
      description: |-
        The request was not compliant with the documentation
        (eg. missing fields, etc).
    UnauthorizedError:
      description: |-
        Access token is missing or invalid
    InternalServerError:
      description: |-
        The server encountered an internal error.
        Further info in server logs.
  parameters:
    UserId:
      name: user-id
      in: path
      description: The ID of the user resource
      required: true
      schema:
        type: string
        example: "abcdef012345"
    PhotoId:
      name: photo-id
      in: path
      description: The ID of the photo resource
      required: true
      schema:
        type: string
        example: "abc123"
    TargetUserId:
      name: target-user-id
      in: path
      description: The ID of the target user resource
      required: true
      schema:
        type: string
        example: "ghijkl67890"
  requestBodies:
    Username:
      description: The username of the user
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                example: Maria
                pattern: 'Ë†.*?$'
                minLength: 3
                maxLength: 16
  schemas:
    CommentDetails:
      type: object
      properties:
        id:
          description: Unique comment identifier
          type: string
          example: "bcd456"
        created_datetime:
          type: string
          format: date-time
          description: Comment creation date and time
          example: "2022-05-32T08:30:00Z"
        user_author:
          $ref: "#/components/schemas/UserShortInfo"
        text:
          description: Text of the comment
          type: string
          example: "Nice photo! :)"
          minLength: 3
          maxLength: 300
    CommentsCollection:
      type: object
      properties:
        count:
          description: Number of comments a photo has received.
          type: integer
          example: 50
        data:
          description: Collection of comments.
          type: array
          items:
            $ref: "#/components/schemas/CommentDetails"
    LikesCollection:
      type: object
      properties:
        count:
          description: Number of likes that a photo has received.
          type: integer
          example: 96
        data:
          description: Collection of users who liked a photo.
          type: array
          items:
            $ref: "#/components/schemas/UserShortInfo"
    PhotoDetails:
      type: object
      properties:
        id:
          description: Unique photo identifier
          type: string
          example: "abc123"
        created_datetime:
          type: string
          format: date-time
          description: Photo creation date and time
          example: "2021-01-30T08:30:00Z"
        photo_url:
          description: URL of the photo resource
          type: string
        user_owner:
          $ref: "#/components/schemas/UserShortInfo"
        likes:
          $ref: "#/components/schemas/LikesCollection"
        comments:
          $ref: "#/components/schemas/CommentsCollection"
    PhotoListResponse:
        type: array
        items:
          $ref: "#/components/schemas/PhotoDetails"
    UserMetrics:
      type: object
      properties:
        followers:
          description: Number of a user's followers
          type: integer
          example: 28
          minimum: 0
        following:
          description: Number of users followed by a user
          type: integer
          example: 42
          minimum: 0
        photos:
          description: Number of photos uploaded by a user
          type: integer
          example: 16
          minimum: 0
    UserProfile:
      type: object
      properties:
        id:
          description: Unique user identifier
          type: string
          example: "abcdef012345"
        username:
          description: The username of the user
          type: string
          example: Maria
          pattern: 'Ë†.*?$'
          minLength: 3
          maxLength: 16
        counts:
          $ref: "#/components/schemas/UserMetrics"
    UserShortInfo:
      type: object
      properties:
        id:
          description: Unique user identifier
          type: string
          example: "abcdef012345"
        username:
          description: The username of the user
          type: string
          example: Maria
          pattern: 'Ë†.*?$'
          minLength: 3
          maxLength: 16
    UsersInfoListResponse:
      type: array
      items:
        $ref: "#/components/schemas/UserShortInfo"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
 